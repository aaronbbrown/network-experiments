# -*- mode: ruby -*-
# vi: set ft=ruby :

Interface = Struct.new(:ip, :netmask, :gateway) do
  def initialize(ip, netmask = '255.255.255.0', gateway = nil)
    super
  end
end

ROUTER_CMDS=<<SHELL
  set -x

  sysctl -w net.ipv4.ip_forward=1
  apt-get install -qy quagga

  cp /vagrant/$(hostname -s)/zebra.conf /etc/quagga/zebra.conf
  cp /vagrant/$(hostname -s)/bgpd.conf /etc/quagga/bgpd.conf

  sed -i -e 's/zebra=no/zebra=yes/' /etc/quagga/daemons
  sed -i -e 's/bgpd=no/bgpd=yes/' /etc/quagga/daemons

  chown -R quagga:quaggavty /etc/quagga
  chmod -v 777 /etc/quagga
  chmod -Rv 666 /etc/quagga/*
  systemctl restart quagga
  umask=022 echo "export VTYSH_PAGER=more" > /etc/profile.d/vtysh_pager.sh
SHELL


ROUTERS = [
  { name: 'r1',
    nics: [ Interface.new('192.168.50.10'),
            Interface.new('192.168.10.2') ]},
  { name: 'r2',
    nics: [ Interface.new('192.168.50.20'),
            Interface.new('192.168.20.2') ]},
  { name: 'r3',
    nics: [ Interface.new('192.168.20.3'),
            Interface.new('192.168.30.2') ]},
  { name: 'r4',
    nics: [ Interface.new('192.168.30.3'),
            Interface.new('192.168.10.4'),
            Interface.new('192.168.40.2') ]}
]

SERVERS = [
  { name: 's1',
    nics: [ Interface.new('192.168.10.100', '255.255.255.0', '192.168.10.2') ] },
  { name: 's2',
    nics: [ Interface.new('192.168.20.100', '255.255.255.0', '192.168.20.2') ] },
  { name: 's3',
    nics: [ Interface.new('192.168.30.100', '255.255.255.0', '192.168.30.2') ] },
  { name: 's4',
    nics: [ Interface.new('192.168.40.100', '255.255.255.0', '192.168.40.2') ] },
]

all_ips = ROUTERS.map { |r| r[:nics] }.flatten.map(&:ip)
all_ips += SERVERS.map { |r| r[:nics] }.flatten.map(&:ip)

CMDS=<<SHELL
set -x
if [ ! -f '/tmp/apt.done' ]; then
  apt-get update
  apt-get install -qy tcpdump
  touch /tmp/apt.done
fi

echo 'export IPADDRS="#{all_ips.join(' ')}"' > /usr/local/etc/ips
SHELL

Vagrant.configure("2") do |config|
  config.vm.box = "debian/jessie64"
  config.vm.provision "shell", inline: CMDS

  ROUTERS.each do |router|
    config.vm.define router[:name] do |c|
      c.vm.hostname = router[:name]
      router[:nics].each do |nic|
        c.vm.network "private_network", nic.to_h
      end

      c.vm.provision "shell", inline: ROUTER_CMDS
    end
  end

  SERVERS.each do |server|
    # servers
    config.vm.define server[:name] do |c|
      c.vm.hostname = server[:name]
      server[:nics].each do |nic|
        c.vm.network "private_network", nic.to_h
      end

      # static route for all interal networks because Virtualbox configures its
      # own eth0 with the default gateway
      c.vm.provision "shell",
        inline: "ip route add 192.168.0.0/16 via #{server[:nics].first.gateway} dev eth1 || true"
    end
  end
end
